<<<<<<< HEAD
double_well_stationary_distribution(-log(x) - C) / x
}
#Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
1000 * shape_dens(x)
}
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density))) +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
#Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
10000 * shape_dens(x)
}
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density))) +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(log(dataset$Ca2))){
browser()
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
#Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
10000 * shape_dens(x)
}
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density))) +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
shape_dens(1000)
shape_dens(100)
shape_dens(1)
shape_dens(0.1)
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
browser()
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
#Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
10000 * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density))) +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = "ucv") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = "bcv") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
?density
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01) kernel = "epanechnikov") +
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
bw.bcv(dataset$Ca2, lower = 0.01)
bw.bcv(dataset$Ca2, lower = 0.1)
bw.bcv(dataset$Ca2, lower = 0.5)
bw.bcv(dataset$Ca2, lower = 0.8)
bw.bcv(dataset$Ca2, lower = 10)
ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
p2
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
p2
p1
ggsave("Stationary distribution of Double-Well.jpeg", p1)
ggsave("Stationary distribution of Double-Well.jpeg", p2)
ggsave("Stationary distribution of Double-Well.jpeg", p1)
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of transformed Double-Well.jpeg", p2)
library(magrittr)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
optimizer <- function(par,
fn,
...
) {
tryCatch({
optim(
par = par,
fn = fn,
...,
control = list(
reltol = sqrt(.Machine$double.eps) / 1e8,
maxit = 1000L
),
method = "BFGS"
)$par
},
error = function(e) {
optim(
par = par,
fn = fn,
...,
control = list(
reltol = sqrt(.Machine$double.eps) / 1e8,
maxit = 1000L
)
)$par
}
)
}
library(magrittr)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
test <- rmilstein(
,
x0 = dataset$Ca2[1],
t0 = 23,
t1 = 93,
dt = 0.02,
fs = CIR_fn
) %>%
{-log(.) - mean(log(dataset$Ca2))} %>%
data.frame(x = ., t = seq(23, 93, 0.02))
library(magrittr)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
double_well_stationary_distribution <- function(x, par = sim_par){
shape_dens <- function(x){
exp(2 / par[4]^2 * (-par[3] / 4 * x^4 + par[2] / 2 * x^2 + par[1] * x))
}
Z <- integrate(shape_dens, lower = -Inf, upper = Inf)$value
1/Z * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
library(magrittr)
library(ggplot2)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
double_well_stationary_distribution <- function(x, par = sim_par){
shape_dens <- function(x){
exp(2 / par[4]^2 * (-par[3] / 4 * x^4 + par[2] / 2 * x^2 + par[1] * x))
}
Z <- integrate(shape_dens, lower = -Inf, upper = Inf)$value
1/Z * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of Double-Well.jpeg", p1)
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of transformed Double-Well.jpeg", p2)
library(gridExtra)
grid.arrange(p1,p2)
grid.arrange(p1,p2, ncol = 2)
optimizer <- function(par,
fn,
...
) {
tryCatch({
optim(
par = par,
fn = fn,
...,
control = list(
reltol = sqrt(.Machine$double.eps) / 1e8,
maxit = 1000L
),
method = "BFGS"
)$par
},
error = function(e) {
optim(
par = par,
fn = fn,
...,
control = list(
reltol = sqrt(.Machine$double.eps) / 1e8,
maxit = 1000L
)
)$par
}
)
}
library(magrittr)
library(ggplot2)
library(gridExtra)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
double_well_stationary_distribution <- function(x, par = sim_par){
shape_dens <- function(x){
exp(2 / par[4]^2 * (-par[3] / 4 * x^4 + par[2] / 2 * x^2 + par[1] * x))
}
Z <- integrate(shape_dens, lower = -Inf, upper = Inf)$value
1/Z * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of Double-Well.jpeg", p1)
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of transformed Double-Well.jpeg", p2)
grid.arrange(p1,p2, ncol = 2)
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = local_linearization,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
library(magrittr)
library(ggplot2)
library(gridExtra)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = local_linearization,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
double_well_stationary_distribution <- function(x, par = sim_par){
shape_dens <- function(x){
exp(2 / par[4]^2 * (-par[3] / 4 * x^4 + par[2] / 2 * x^2 + par[1] * x))
}
Z <- integrate(shape_dens, lower = -Inf, upper = Inf)$value
1/Z * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of Double-Well.jpeg", p1)
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of transformed Double-Well.jpeg", p2)
grid.arrange(p1,p2, ncol = 2)
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = local_linearization,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
sim_par
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
grid.arrange(p1,p2, ncol = 2)
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
library(magrittr)
library(ggplot2)
library(gridExtra)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = strang,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
double_well_stationary_distribution <- function(x, par = sim_par){
shape_dens <- function(x){
exp(2 / par[4]^2 * (-par[3] / 4 * x^4 + par[2] / 2 * x^2 + par[1] * x))
}
Z <- integrate(shape_dens, lower = -Inf, upper = Inf)$value
1/Z * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of Double-Well.jpeg", p1)
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of transformed Double-Well.jpeg", p2)
grid.arrange(p1,p2, ncol = 2)
library(magrittr)
library(ggplot2)
library(gridExtra)
source("load_data.R")
source("implementations.R")
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
log_CIR_fn <- Log_CIR_functions(mean(-log(dataset$Ca2)))
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
sim_par <- optimizer(
par = DW_fn$inverse_transform(c(1, -1 ,1, 1)),
fn = local_linearization,
fs = DW_fn,
x = dataset$logCa2,
dt = 0.02
) %>% DW_fn$transform()
double_well_stationary_distribution <- function(x, par = sim_par){
shape_dens <- function(x){
exp(2 / par[4]^2 * (-par[3] / 4 * x^4 + par[2] / 2 * x^2 + par[1] * x))
}
Z <- integrate(shape_dens, lower = -Inf, upper = Inf)$value
1/Z * shape_dens(x)
}
double_well_stationary_distribution_original <- function(x, par = sim_par, C = mean(-log(dataset$Ca2))){
shape_dens <- function(x){
double_well_stationary_distribution(-log(x) - C) / x
}
Z <- integrate(shape_dens, lower = 1, upper = Inf)$value
shape_dens(x) / Z
}
p1 <- ggplot() +
# geom_histogram(data = dataset, aes(x = logCa2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = logCa2, after_stat(density)), bw = "bcv", kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of Double-Well.jpeg", p1)
p2 <- ggplot() +
# geom_histogram(data = dataset, aes(x = Ca2, after_stat(density)), col = "black", fill = "grey85", bins = 25) +
geom_density(data = dataset, aes(x = Ca2, after_stat(density)), bw = bw.bcv(dataset$Ca2, lower = 0.01), kernel = "epanechnikov") +
stat_function(fun = double_well_stationary_distribution_original, linewidth = 1, linetype = "dashed") +
ggthemes::theme_base() + theme(plot.background = element_blank())
ggsave("Stationary distribution of transformed Double-Well.jpeg", p2)
grid.arrange(p1,p2, ncol = 2)
sim_par
=======
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_ll", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4)
DW_estimators <- optimizer(
par = DW_par0,
fn = local_linearization,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_ll", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators <- optimizer(
par = DW_par0,
fn = lie_trotter,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_lt", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators <- optimizer(
par = DW_par0,
fn = strang,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators
optimizer(
par = c(1, -1, 1, 2),
fn = strang,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
optimizer(
par = c(1, -1, 1, 2),
fn = strang,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) #%>%
DW_estimators <- optimizer(
par = c(1, -1, 1, 2),
fn = strang,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators <-optimizer(
par = DW_par0,
fn = euler_maruyama,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_em", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4)
DW_estimators <- optimizer(
par = DW_par0,
fn = local_linearization,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_ll", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators <- optimizer(
par = DW_par0,
fn = lie_trotter,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_lt", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators <- optimizer(
par = c(1, -1, 1, 2),
fn = strang,
fs = DW_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4) %>%
rbind(DW_estimators)
DW_estimators
optimizer(
par = c(1, -1, 1, 2),
fn = strang,
fs = DW2_fn,
dt = 0.02,
x = dataset$logCa2
) %>% DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4)
optimizer(
par = c(1, -1, 1, 2),
fn = strang,
fs = exp_DW_fn,
dt = 0.02,
x = dataset$Ca2
) %>% exp_DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4)
exp_DW_fn <- exp_DW_functions(mean(-log(dataset$Ca2)))
optimizer(
par = c(1, -1, 1, 2),
fn = euler_maruyama,
fs = exp_DW_fn,
dt = 0.02,
x = dataset$Ca2
) %>% exp_DW_fn$transform() %>%
t() %>%
data.frame() %>%
dplyr::mutate(estimator = "dw_strang", .before = 1) %>%
dplyr::rename(beta1 = X1, beta2 = X2, beta4 = X3, sigma = X4)
DW_estimators
CIR_estimations
l_cir_strang
l_cir_strang %>%
convert_cir_param()
l_cir_strang %>%
convert_cir_param() %>%
as.data.frame()
l_cir_strang %>%
convert_cir_param() %>%
as.data.frame() %>%
dplyr::rename(beta = V1, mu = V2, sigma = V3)
CIR_estimations
load("cir_martingale.rds")
load("Bootstrap/cir_martingale.rds")
readRDS("cir_martingale.rds")
readRDS("Bootstrap/cir_martingale.rds")
cir_em <- readRDS("cir_maruyama.rds")
l_cir_em <- readRDS("l_cir_maruyama.rds")
l_cir_lt <- readRDS("l_cir_lt.rds")
l_cir_strang <- readRDS("l_cir_strang.rds")
l_cir_ll <- readRDS("l_cir_ll.rds")
cir_em
l_cir_em
cir_martingale <- readRDS("cir_martingale.rds")
cir_em <- readRDS("cir_maruyama.rds")
cir_martingale <- readRDS("cir_martingale.rds")
l_cir_em <- readRDS("l_cir_maruyama.rds")
l_cir_lt <- readRDS("l_cir_lt.rds")
l_cir_strang <- readRDS("l_cir_strang.rds")
l_cir_ll <- readRDS("l_cir_ll.rds")
dw_em <- readRDS("dw_maruyama.rds")
dw_lt <- readRDS("dw_lt.rds")
dw_ll <- readRDS("dw_ll.rds")
dw_strang <- readRDS("dw_strang.rds")
dw_em
list(a = c(1,2,3))[1]
list(a = c(1,2,3))[[1]]
concat_matricies <- function(..., id, names, .transform) {
mats <- as.list(...)
args <- lapply(1:length(mats), function(i) {
out <- .transform(mats[[i]]) %>%
as.data.frame() %>%
dplyr::mutate(estimator = id[i], .before = 1)
names(out) <- names
out
})
do.call(rbind, args)
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
dw_em
dw_strang
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
convert_dw_param <- function(x) {
x[, 4] <- exp(x[, 4])
x
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
convert_dw_param <- function(x) {
x[, 4] <- exp(x[, 4])
x
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
concat_matricies <- function(..., id, names, .transform) {
mats <- as.list(...)
args <- lapply(1:length(mats), function(i) {
print(mats[[i]])
out <- .transform(mats[[i]]) %>%
as.data.frame() %>%
dplyr::mutate(estimator = id[i], .before = 1)
names(out) <- names
out
})
do.call(rbind, args)
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
concat_matricies <- function(..., id, names, .transform) {
browser()
mats <- as.list(...)
args <- lapply(1:length(mats), function(i) {
print(mats[[i]])
out <- .transform(mats[[i]]) %>%
as.data.frame() %>%
dplyr::mutate(estimator = id[i], .before = 1)
names(out) <- names
out
})
do.call(rbind, args)
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
...
as.list(...)
list(...)
concat_matricies <- function(..., id, names, .transform) {
mats <- list(...)
args <- lapply(1:length(mats), function(i) {
print(mats[[i]])
out <- .transform(mats[[i]]) %>%
as.data.frame() %>%
dplyr::mutate(estimator = id[i], .before = 1)
names(out) <- names
out
})
do.call(rbind, args)
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
concat_matricies <- function(..., id, names, .transform) {
mats <- list(...)
args <- lapply(1:length(mats), function(i) {
out <- .transform(mats[[i]]) %>%
as.data.frame() %>%
dplyr::mutate(estimator = id[i], .before = 1)
names(out) <- names
out
})
do.call(rbind, args)
}
concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
)
cir_bootstraps <- concat_matricies(
cir_em,
cir_martingale,
l_cir_em,
l_cir_lt,
l_cir_strang,
l_cir_ll,
id = c("cir_em", "cir_martingale", "l_cir_em", "l_cir_lt", "l_cir_strang", "l_cir_ll"),
names = c("estimator", "beta", "mu", "sigma"),
.transform = convert_cir_param
)
cir_bootstraps
cir_estimators
CIR_estimations
cir_bootstraps <- concat_matricies(
cir_em,
cir_martingale,
l_cir_em,
l_cir_lt,
l_cir_strang,
l_cir_ll,
id = c("cir_em", "cir_martingale", "l_cir_em", "l_cir_lt", "l_cir_strang", "l_cir_ll"),
names = c("estimator", "beta", "mu", "sigma"),
.transform = convert_cir_param
) %>% tidyr::pivot_longer(
-estimator,
names_to = "parameter",
values_to = "estimate"
)
dw_bootstraps <- concat_matricies(
dw_em,
dw_lt,
dw_ll,
dw_strang,
id = c("dw_em", "dw_lt", "dw_ll", "dw_strang"),
names = c("estimator", "beta1", "beta2", "beta4", "sigma"),
.transform = convert_dw_param
) %>% tidyr::pivot_longer(
-estimator,
names_to = "parameter",
values_to = "estimate"
)
DW_estimators %>%
tidyr::pivot_longer(-estimator, names_to = "parameter", values_to = "estimate")
dw_estimates <- DW_estimators %>%
tidyr::pivot_longer(-estimator, names_to = "parameter", values_to = "estimate")
cir_estimates <- CIR_estimations %>%
tidyr::pivot_longer(-estimator, names_to = "parameter", values_to = "estimate")
dw_estimates
cir_estimates
library(ggplot2)
cir_bootstraps %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, ncol = 3)
cir_bootstraps %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3)
cir_bootstraps %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3) +
ylim(NA, 200)
cir_bootstraps %>%
dplyr::filter(dplyr::between(estimate, -100, 1000)) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3)
cir_bootstraps %>%
dplyr::filter(dplyr::between(estimate, -100, 1000)) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3, scales = "free")
cir_bootstraps %>%
dplyr::filter(
(parameter == "sigma" & dplyr::between(estimate, 6, 20)) |
(parameter == "mu" & dplyr::between(estimate, 0, 1000)) |
(parameter == "beta" & dplyr::between(estimate, 0, 2))
) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3, scales = "free")
cir_bootstraps %>%
dplyr::filter(
(parameter == "sigma" & dplyr::between(estimate, 8, 16)) |
(parameter == "mu" & dplyr::between(estimate, 0, 1000)) |
(parameter == "beta" & dplyr::between(estimate, 0, 2))
) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3, scales = "free")
cir_bootstraps %>%
dplyr::filter(
(parameter == "sigma" & dplyr::between(estimate, 8, 16)) |
(parameter == "mu" & dplyr::between(estimate, 0, 1000)) |
(parameter == "beta" & dplyr::between(estimate, 0, 2))
) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_boxplot() +
facet_wrap(~ parameter, nrow = 3, scales = "free")
cir_bootstraps %>%
dplyr::filter(
(parameter == "sigma" & dplyr::between(estimate, 8, 16)) |
(parameter == "mu" & dplyr::between(estimate, 0, 1000)) |
(parameter == "beta" & dplyr::between(estimate, 0, 2))
) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3, scales = "free")
cir_martingale
data.frame(cir_martingale)
cir_martingale_df <- data.frame(cir_martingale) %>%
dplyr::rename(beta = X1, mu = X2, sigma = X3)
cir_martingale_df
cir_martingale_df <- data.frame(cir_martingale) %>%
dplyr::rename(beta = X1, mu = X2, sigma = X3) %>%
dplyr::mutate(estimator = "cir_martingale", .before = 1)
cir_martingale_df %>% head
cir_bootstraps <- concat_matricies(
cir_em,
l_cir_em,
l_cir_lt,
l_cir_strang,
l_cir_ll,
id = c("cir_em", "l_cir_em", "l_cir_lt", "l_cir_strang", "l_cir_ll"),
names = c("estimator", "beta", "mu", "sigma"),
.transform = convert_cir_param
) %>% tidyr::pivot_longer(
-estimator,
names_to = "parameter",
values_to = "estimate"
)
cir_bootstraps <- concat_matricies(
cir_em,
l_cir_em,
l_cir_lt,
l_cir_strang,
l_cir_ll,
id = c("cir_em", "l_cir_em", "l_cir_lt", "l_cir_strang", "l_cir_ll"),
names = c("estimator", "beta", "mu", "sigma"),
.transform = convert_cir_param
) %>%
rbind(cir_martingale_df) %>%
tidyr::pivot_longer(
-estimator,
names_to = "parameter",
values_to = "estimate"
)
cir_bootstraps
cir_bootstraps %>%
dplyr::filter(
(parameter == "sigma" & dplyr::between(estimate, 8, 16)) |
(parameter == "mu" & dplyr::between(estimate, 0, 1000)) |
(parameter == "beta" & dplyr::between(estimate, 0, 2))
) %>%
ggplot(aes(x = estimator, y = estimate)) +
geom_violin() +
facet_wrap(~ parameter, nrow = 3, scales = "free")
>>>>>>> 7e4ca20 (Tilføjer Rhistory til gitignore)
