---
title: "Bootstrap"
format: html
editor: visual
---

## Load implementations

```{r}
library(magrittr)
source("../load_data.R")
source("../implementations.R")
```

## Load Data and Models

```{r}
dataset <- import_data()
CIR_fn <- CIR_functions()
L_CIR_fn <- Lamperti_CIR_functions()
DW_fn <- DW_functions()
```

## Estimation Test

```{r}
par1 <- optim(
  par = L_CIR_fn$inverse_transform(martingale(dataset$Ca2, 0.02)),
  fn = lie_trotter,
  fs = L_CIR_fn,
  dt = 0.02,
  x = dataset$Y,
  control = list(
    reltol = sqrt(.Machine$double.eps) / 1e8,
    maxit = 1000L
  ),
  method = "BFGS"
) %>% 
  magrittr::extract2("par") %>% 
  CIR_fn$transform()
par1
```

## Simulation Test

```{r}
test <- rmilstein(
  CIR_fn$inverse_transform(par1),
  x0 = dataset$Ca2[1],
  t0 = 23,
  t1 = 93,
  dt = 0.001,
  fs = CIR_fn
) %>% 
  # {.^2 / 2} %>% 
  data.frame(x = ., t = seq(23, 93, 0.001))
```

```{r}
library(ggplot2)
test[seq(1, nrow(test), 200), ] %>% 
  ggplot(aes(x = t, y = x)) +
  geom_path() +
  ggplot2::theme_bw()
```

## Bootstrap Test

```{r}
bootstrap_model <- function(n, 
                            x, 
                            par0, 
                            fs, 
                            dt, 
                            fitter, 
                            sampler, 
                            subsamples = 10,
                            report = 25) {
  par <- optim(
    par = par0,
    fn = fitter,
    fs = fs,
    dt = dt,
    x = x,
    control = list(
      reltol = sqrt(.Machine$double.eps) / 1e8,
      maxit = 1000L
    ),
    method = "BFGS"
    )$par
  
  M <- matrix(nrow = n, ncol = length(par))
  
  for(i in 1:n) {
    if(i %% report == 0 & i >= report) 
      print(paste0("Iteration: ", i, " out of ", n))
    sims <- sampler(
      par,
      x0 = x[1],
      t0 = 23,
      t1 = 93,
      dt = dt / subsamples,
      fs = fs
    )
    
    M[i, ] <- optim(
    par = par,
    fn = fitter,
    fs = fs,
    dt = dt,
    x = sims[seq(1, length(sims), subsamples)],
    control = list(
      reltol = sqrt(.Machine$double.eps) / 1e8,
      maxit = 1000L
    ),
    method = "BFGS"
    )$par
  }
  M
}
```

```{r}
bootstrap_model(
  75, 
  dataset$Y,
  par0 = L_CIR_fn$inverse_transform(martingale(dataset$Ca2, 0.02)),
  fs = L_CIR_fn,
  dt = 0.02,
  euler_maruyama,
  reuler_maruyama,
  subsamples = 1,
  report = 10
  )
```
